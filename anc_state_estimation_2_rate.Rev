
#
# Script to infer ancestral corm states for Isoetes. States coded as:
#       0 = trilobate
#       1 = bilobate
#
# Here we assume a simple 2 rate continuous-time Markov model of 
# phenotypic character evolution conditioned on a fixed tree.
#
# author: Will Freyman
#
#

# set the analysis name
analysis_name = "2_rate_model"

mvi = 0
mni = 0

# here we use a fixed tree for the analysis 
tree <- readTrees("data/MAP-rooted.tre")[1]

# read in corm data
data <- readCharacterDataDelimited("data/corm_data.csv", type="NaturalNumbers", stateLabels=2, delimiter=",", headers=false)


# our model of character evolution:
# here we assume every rate i <-> j to be independent and exponentially distributed
rate_pr := tree.treeLength() / 10
rate_01 ~ dnExp(rate_pr)
rate_10 ~ dnExp(rate_pr)

moves[++mvi] = mvScale( rate_01, weight=2 )
moves[++mvi] = mvScale( rate_10, weight=2 )

Q := fnFreeK( [ rate_01, rate_10 ], rescaled=false )

# set up the root state frequencies 

rf_prior <- [1,1]
rf ~ dnDirichlet( rf_prior )
moves[++mvi] = mvBetaSimplex( rf, weight=2 )
moves[++mvi] = mvDirichletSimplex( rf, weight=2 )

# set up the CTMC 

ctmc ~ dnPhyloCTMC( tree, Q, branchRates=1.0, rootFrequencies=rf, type="NaturalNumbers")
ctmc.clamp( data )


# Set up the MCMC monitors

monitors[++mni] = mnModel(filename="output/" + analysis_name + ".log", printgen=10)
monitors[++mni] = mnScreen(printgen=100, rf)
monitors[++mni] = mnJointConditionalAncestralState(tree=tree, ctmc=ctmc, type="NaturalNumbers", printgen=10, withTips=true, withStartStates=false, filename="output/" + analysis_name + "-anc.log")


# finalize the model 

mymodel = model(Q)


# run the MCMC simulation 

mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.burnin(generations=2000, tuningInterval=100)
mymcmc.run(generations=10000)


# summarize ancestral states
anc_states = readAncestralStateTrace("output/" + analysis_name + "-anc.log")
anc_tree = ancestralStateTree(tree=tree, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/ancestral_states_" + analysis_name + ".tree", burnin=0, summary_statistic="MAP", site=0)

q()
