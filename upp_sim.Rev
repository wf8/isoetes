
# 
# Simulations to test the statistical power of detecting irreversible evolution
# over the Isoetes phylogeny.
#
# author: Will Freyman
#

# some settings for the simulations
mcmc_gen = 10000
burnin_gen = 1000
log_freq = 10
#sites = [5, 50, 100]
sites = [1, 5, 10, 50, 100]
reps = 10


for (i in 1:sites.size()) {

    for (j in 1:reps) {

        analysis_name = "upp_sim_" + sites[i] + "_" + j
        num_sites = sites[i]
        seed(i*j)
        mvi = 0
        mni = 0

        # read in the tree
        tree <- readTrees("data/MAP-rooted.tre")[1]
        
        # simulate data using the mean estimated rate from the irreversible model
        Q_s := fnFreeK( [2.04, 0.0] , rescaled=false )
        sim_data ~ dnPhyloCTMC( tree, Q_s, nSites=num_sites, branchRates=1.0, rootFrequencies=simplex([1,0]), type="NaturalNumbers") 


        # A reversible-jump MCMC model of character evolution:
        # here we assume an equal prior probability on each of
        # the 5 possible corm evolution models:  
        # 1) no change
        # 2) irreversible 0->1
        # 3) irreversible 1->0
        # 4) 1 rate model
        # 5) 2 rate model
        # Non-zero transition rates are drawn from an exponential
        # distribution. The MCMC will sample from each model
        # proportionately to their posterior probability.
        
        # exponential priors for non-zero transition rates
        rate_pr := tree.treeLength() # 1 transition per tree
        base_rates[1] ~ dnExp(rate_pr)
        base_rates[2] ~ dnExp(rate_pr)
        moves[++mvi] = mvScale( base_rates[1], weight=2 )
        moves[++mvi] = mvScale( base_rates[2], weight=2 )

        # uniform partitioning prior for jumping between models
        rates ~ dnUPP( base_rates, include_zero=true )
        moves[++mvi] = mvUPPAllocation( rates, weight=20 )

        rate_01 := rates[1] 
        rate_10 := rates[2] 

        # here we set up the rate matrix Q
        Q := fnFreeK( rates, rescaled=false )

        # set up the root state frequencies 
        rf_prior <- [1,1]
        rf ~ dnDirichlet( rf_prior )
        moves[++mvi] = mvBetaSimplex( rf, weight=2 )
        moves[++mvi] = mvDirichletSimplex( rf, weight=2 )

        # set up the CTMC 
        ctmc ~ dnPhyloCTMC( tree, Q, branchRates=1.0, rootFrequencies=rf, type="NaturalNumbers")
        ctmc.clamp( sim_data )


        # set up the MCMC monitors
        monitors[++mni] = mnModel(filename="output/" + analysis_name + ".log", printgen=log_freq)
        monitors[++mni] = mnScreen(printgen=log_freq, rate_01, rate_10)

        # finalize the model 
        mymodel = model(Q)


        # run the MCMC simulation 
        mymcmc = mcmc(mymodel, monitors, moves)
        mymcmc.burnin(generations=burnin_gen,tuningInterval=log_freq)
        mymcmc.run(generations=mcmc_gen)


    }
}

q()
